// <auto-generated />
using System;
using Feed.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Feed.Migrations
{
    [DbContext(typeof(FeedDbContext))]
    [Migration("20250928112314_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Feed.Models.Artifact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.ToTable("Artifact");
                });

            modelBuilder.Entity("Feed.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Feed.Models.Artifact", b =>
                {
                    b.HasOne("Feed.Models.Plan", "Plan")
                        .WithMany("Artifacts")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Feed.Models.Fields", "Fields", b1 =>
                        {
                            b1.Property<Guid>("ArtifactId")
                                .HasColumnType("uuid");

                            b1.HasKey("ArtifactId");

                            b1.ToTable("Artifact");

                            b1.WithOwner()
                                .HasForeignKey("ArtifactId");

                            b1.OwnsOne("Feed.Models.Field", "Date", b2 =>
                                {
                                    b2.Property<Guid>("FieldsArtifactId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Selector")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(1000)
                                        .HasColumnType("character varying(1000)");

                                    b2.HasKey("FieldsArtifactId");

                                    b2.ToTable("Artifact");

                                    b2.WithOwner()
                                        .HasForeignKey("FieldsArtifactId");
                                });

                            b1.OwnsOne("Feed.Models.Field", "Description", b2 =>
                                {
                                    b2.Property<Guid>("FieldsArtifactId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Selector")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(1000)
                                        .HasColumnType("character varying(1000)");

                                    b2.HasKey("FieldsArtifactId");

                                    b2.ToTable("Artifact");

                                    b2.WithOwner()
                                        .HasForeignKey("FieldsArtifactId");
                                });

                            b1.OwnsOne("Feed.Models.Field", "Item", b2 =>
                                {
                                    b2.Property<Guid>("FieldsArtifactId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Selector")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(1000)
                                        .HasColumnType("character varying(1000)");

                                    b2.HasKey("FieldsArtifactId");

                                    b2.ToTable("Artifact");

                                    b2.WithOwner()
                                        .HasForeignKey("FieldsArtifactId");
                                });

                            b1.OwnsOne("Feed.Models.Field", "Link", b2 =>
                                {
                                    b2.Property<Guid>("FieldsArtifactId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Selector")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(1000)
                                        .HasColumnType("character varying(1000)");

                                    b2.HasKey("FieldsArtifactId");

                                    b2.ToTable("Artifact");

                                    b2.WithOwner()
                                        .HasForeignKey("FieldsArtifactId");
                                });

                            b1.OwnsOne("Feed.Models.Field", "Title", b2 =>
                                {
                                    b2.Property<Guid>("FieldsArtifactId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Selector")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(1000)
                                        .HasColumnType("character varying(1000)");

                                    b2.HasKey("FieldsArtifactId");

                                    b2.ToTable("Artifact");

                                    b2.WithOwner()
                                        .HasForeignKey("FieldsArtifactId");
                                });

                            b1.Navigation("Date")
                                .IsRequired();

                            b1.Navigation("Description")
                                .IsRequired();

                            b1.Navigation("Item")
                                .IsRequired();

                            b1.Navigation("Link")
                                .IsRequired();

                            b1.Navigation("Title")
                                .IsRequired();
                        });

                    b.Navigation("Fields")
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Feed.Models.Plan", b =>
                {
                    b.Navigation("Artifacts");
                });
#pragma warning restore 612, 618
        }
    }
}
